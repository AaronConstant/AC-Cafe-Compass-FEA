.blogger-detail-container {
  height: 100vh;
  border: 1px solid black;
}

.blogger-detail {
  width: 600px;
  margin: 120px auto;
  padding: 20px;
  background-color: #f9f9f9;
  border-radius: 8px;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
  border: 1px solid rgb(161, 161, 161);
  text-align: center;

  .blogger-title {
      font-size: 40px;
      text-align: center;
      color: #333;
      margin-bottom: 20px;
  }

  .first-name, 
  .last-name, 
  .email, 
  .gender, 
  .member-status, 
  .number {
      font-size: 16px;
      margin: 10px 0;
  }

  .reviews {
      margin-top: 20px;
      font-size: 18px;
      font-weight: bold;
  }

  .no-reviews {
      font-style: italic;
      color: #666;
  }

  .review {
      margin: 20px 0;
      padding: 10px;
      border: 1px solid #ccc;
      border-radius: 5px;

      p {
          margin: 5px 0;
      }

      .review-id, 
      .review-content, 
      .review-rating, 
      .review-cafe_id {
          font-size: 16px;
          margin: 5px 0;
      }
  }

  .btn-selection {
      display: flex;
      justify-content: space-evenly;
      padding: 10px;

      .basic {
          padding: 5px;
          border-radius: 8px;
          width: 70px;
          border: 1px solid black;
          cursor: pointer;
          transition: background-color 0.3s, transform 0.3s;

          &:hover {
              background-color: #e0e0e0;
              transform: scale(1.05);
          }
      }
  }
}

//You can have multiple keyframe functions happening in one sequence but it goes in order of how you would want them to be implemented. slideOut will occur after you click no and anything between or after the default animation has occurred. 

// slide in(default animation) -> Others(subsequent animations) -> slide Out(exiting animation if applicable)

@keyframes slideIn {
  from {
      transform: translateY(-100%);
      opacity: 0;
  }
  to {
      transform: translateY(0);
      opacity: 1;
  }
}

@keyframes slideOut {
  from {
      transform: translateY(0);
      opacity: 1;
  }
  to {
      transform: translateY(-100%);
      opacity: 0;
  }
}

.msg-container {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 50;

  .msg-container__message {
      border: 2px solid black;
      background: white;
      padding: 20px;
      border-radius: 5px;
      text-align: center;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    //This animation happens by default whenever the message is displayed once delete is clicked
      animation: slideIn 0.5s ease-out;
      &.slide-out {
        animation: slideOut 0.5s ease-in; 
        //This overrides the default animations of the class when the conditions are met and the state is true and changes the className for No onClick in the message.
      }
  }
  //Why can't we use & within the __message???
  //This shit confusing.


  .msg-container__message button {
      margin: 5px;
      padding: 10px 20px;
      cursor: pointer;
      //transition is applying a counter affect which would transition to the new color over that duration of time and transform following the description below will transform the position of the element when conditions are met. 
      transition: background-color 0.3s, transform 0.3s;

      &:hover {
          background-color: #f0f0f0;
          // scale is used to move an element up and down the X and Y axis or both. Currently it is scaling both since it has only one value within it. It goes by percentage so times by 100it and it will scale that percentage. So once hovering it will move the button according to the access percentage/decimal.
          transform: scale(1.05);
      }
  }

  .yes-btn {
      color: red;
      // the transition all applies to all elements when it changes upon hover. It also can be applied to focus and media queries. More research...
      transition: all 0.5s;
      cursor: pointer;
      
      &:hover {
          color: darkred;
      }
  }

  .no-btn {
      color: black;
      transition: all 0.5s;
      cursor: pointer;
      
      &:hover {
          color: rgb(128, 128, 128);
      }
  }
}

  
    
  